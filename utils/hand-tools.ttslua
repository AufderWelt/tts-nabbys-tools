--[[
  A script for converting hand scales to real world units and vice versa.
  it has two main exported methods: `worldToHand()` and `handToWorld()`.
  
  Usage example:
    handTools = require("hand-tools")

    Player.White.setHandTransform({
      position = {0, 2, 20},
      rotation = {0, 0, 0},
      scale = handTools.worldToHand({10, 5, 5})
    })
  
  hand scaling depends on the table used for your mod (since hands are linked to
  the table). `detectTableType()` is called on module load to detect which table
  is loaded, if you change tables then you must save and reload or call it again
  for the calculations to work properly.
]]

local ht = {}

ht.scales = {
  Table_Square = Vector{1.174093, 1.174093, 1.174093},
  Table_Hexagon = Vector{1.174093, 1.174093, 1.174093},
  Table_Octagon = Vector{1.311487, 1.585984, 1.311487},
  Table_Circular = Vector{1.623746, 1.623746, 1.623746},
  Table_Poker = Vector{1.341821, 1.341821, 1.341821},
  Table_RPG = Vector{1.639983, 1.623745, 1.623746},
  Table_Glass = Vector{1.623746, 1.623746, 1.623746},
  Table_Custom = Vector{1.315, 1.296753, 1.3036},
  Table_Custom_Square = Vector{1.185335, 1.185335, 1.185335},
  Table_None = Vector{1.315, 1.3036, 1.296753}
}

function ht.handToWorld(vec)
  return Vector(vec):scale(ht.scales[ht.tableType])
end

function ht.worldToHand(vec)
  local hs = ht.scales[ht.tableType]
  return Vector(vec):scale(Vector{1 / hs.x, 1 / hs.y, 1 / hs.z})
end

function ht.detectTableType()
  for _, tbl in ipairs(Physics.cast({ origin = {0, 1, 0}, direction = {0, -1, 0} })) do
    if tbl.hit_object.tag == "Surface" then
      ht.tableType = tbl.hit_object.name
      return
    end
  end
  ht.tableType = "Table_None"
end

ht.detectTableType() -- autodetect on load

return ht
